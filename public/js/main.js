/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/custom-event-polyfill/custom-event-polyfill.js":
/*!*********************************************************************!*\
  !*** ./node_modules/custom-event-polyfill/custom-event-polyfill.js ***!
  \*********************************************************************/
/***/ (function() {

eval("// Polyfill for creating CustomEvents on IE9/10/11\n\n// code pulled from:\n// https://github.com/d4tocchini/customevent-polyfill\n// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent#Polyfill\n\ntry {\n    var ce = new window.CustomEvent('test');\n    ce.preventDefault();\n    if (ce.defaultPrevented !== true) {\n        // IE has problems with .preventDefault() on custom events\n        // http://stackoverflow.com/questions/23349191\n        throw new Error('Could not prevent default');\n    }\n} catch(e) {\n  var CustomEvent = function(event, params) {\n    var evt, origPrevent;\n    params = params || {\n      bubbles: false,\n      cancelable: false,\n      detail: undefined\n    };\n\n    evt = document.createEvent(\"CustomEvent\");\n    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n    origPrevent = evt.preventDefault;\n    evt.preventDefault = function () {\n      origPrevent.call(this);\n      try {\n        Object.defineProperty(this, 'defaultPrevented', {\n          get: function () {\n            return true;\n          }\n        });\n      } catch(e) {\n        this.defaultPrevented = true;\n      }\n    };\n    return evt;\n  };\n\n  CustomEvent.prototype = window.Event.prototype;\n  window.CustomEvent = CustomEvent; // expose definition to window\n}\n\n\n//# sourceURL=webpack://gulp-starter/./node_modules/custom-event-polyfill/custom-event-polyfill.js?");

/***/ }),

/***/ "./node_modules/custom-select/build/index.js":
/*!***************************************************!*\
  !*** ./node_modules/custom-select/build/index.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }(); /**\ncustom-select\nlightweight JS script for custom select creation.\needs no dependencies.\nnv0.0.1\nhttps://github.com/custom-select/custom-select)\nnopyright (c) 2016 Gionatan Lombardi & Marco Nucara\nicense\nn\nexports[\"default\"] = customSelect;\n\n__webpack_require__(/*! custom-event-polyfill */ \"./node_modules/custom-event-polyfill/custom-event-polyfill.js\");\n\nvar defaultParams = {\n  containerClass: 'custom-select-container',\n  openerClass: 'custom-select-opener',\n  panelClass: 'custom-select-panel',\n  optionClass: 'custom-select-option',\n  optgroupClass: 'custom-select-optgroup',\n  isSelectedClass: 'is-selected',\n  hasFocusClass: 'has-focus',\n  isDisabledClass: 'is-disabled',\n  isOpenClass: 'is-open'\n};\n\nfunction builder(el, builderParams) {\n  var containerClass = 'customSelect';\n  var isOpen = false;\n  var uId = '';\n  var select = el;\n  var container = void 0;\n  var opener = void 0;\n  var focusedElement = void 0;\n  var selectedElement = void 0;\n  var panel = void 0;\n  var currLabel = void 0;\n\n  var resetSearchTimeout = void 0;\n  var searchKey = '';\n\n  //\n  // Inner Functions\n  //\n\n  // Sets the focused element with the neccessary classes substitutions\n  function setFocusedElement(cstOption) {\n    if (focusedElement) {\n      focusedElement.classList.remove(builderParams.hasFocusClass);\n    }\n    if (typeof cstOption !== 'undefined') {\n      focusedElement = cstOption;\n      focusedElement.classList.add(builderParams.hasFocusClass);\n      // Offset update: checks if the focused element is in the visible part of the panelClass\n      // if not dispatches a custom event\n      if (isOpen) {\n        if (cstOption.offsetTop < cstOption.offsetParent.scrollTop || cstOption.offsetTop > cstOption.offsetParent.scrollTop + cstOption.offsetParent.clientHeight - cstOption.clientHeight) {\n          cstOption.dispatchEvent(new CustomEvent('custom-select:focus-outside-panel', { bubbles: true }));\n        }\n      }\n    } else {\n      focusedElement = undefined;\n    }\n  }\n\n  // Reassigns the focused and selected custom option\n  // Updates the opener text\n  // IMPORTANT: the setSelectedElement function doesn't change the select value!\n  function setSelectedElement(cstOption) {\n    if (selectedElement) {\n      selectedElement.classList.remove(builderParams.isSelectedClass);\n      selectedElement.removeAttribute('id');\n      opener.removeAttribute('aria-activedescendant');\n    }\n    if (typeof cstOption !== 'undefined') {\n      cstOption.classList.add(builderParams.isSelectedClass);\n      cstOption.setAttribute('id', containerClass + '-' + uId + '-selectedOption');\n      opener.setAttribute('aria-activedescendant', containerClass + '-' + uId + '-selectedOption');\n      selectedElement = cstOption;\n      opener.children[0].textContent = selectedElement.customSelectOriginalOption.text;\n    } else {\n      selectedElement = undefined;\n      opener.children[0].textContent = '';\n    }\n    setFocusedElement(cstOption);\n  }\n\n  function setValue(value) {\n    // Gets the option with the provided value\n    var toSelect = select.querySelector('option[value=\\'' + value + '\\']');\n    // If no option has the provided value get the first\n    if (!toSelect) {\n      var _select$options = _slicedToArray(select.options, 1);\n\n      toSelect = _select$options[0];\n    }\n    // The option with the provided value becomes the selected one\n    // And changes the select current value\n    toSelect.selected = true;\n\n    setSelectedElement(select.options[select.selectedIndex].customSelectCstOption);\n  }\n\n  function moveFocuesedElement(direction) {\n    // Get all the .custom-select-options\n    // Get the index of the current focused one\n    var currentFocusedIndex = [].indexOf.call(select.options, focusedElement.customSelectOriginalOption);\n    // If the next or prev custom option exist\n    // Sets it as the new focused one\n    if (select.options[currentFocusedIndex + direction]) {\n      setFocusedElement(select.options[currentFocusedIndex + direction].customSelectCstOption);\n    }\n  }\n\n  // Open/Close function (toggle)\n  function open(bool) {\n    // Open\n    if (bool || typeof bool === 'undefined') {\n      // If present closes an opened instance of the plugin\n      // Only one at time can be open\n      var openedCustomSelect = document.querySelector('.' + containerClass + '.' + builderParams.isOpenClass);\n      if (openedCustomSelect) {\n        openedCustomSelect.customSelect.open = false;\n      }\n\n      // Opens only the clicked one\n      container.classList.add(builderParams.isOpenClass);\n\n      // aria-expanded update\n      container.classList.add(builderParams.isOpenClass);\n      opener.setAttribute('aria-expanded', 'true');\n\n      // Updates the scrollTop position of the panel in relation with the focused option\n      if (selectedElement) {\n        panel.scrollTop = selectedElement.offsetTop;\n      }\n\n      // Dispatches the custom event open\n      container.dispatchEvent(new CustomEvent('custom-select:open'));\n\n      // Sets the global state\n      isOpen = true;\n\n      // Close\n    } else {\n      // Removes the css classes\n      container.classList.remove(builderParams.isOpenClass);\n\n      // aria-expanded update\n      opener.setAttribute('aria-expanded', 'false');\n\n      // Sets the global state\n      isOpen = false;\n\n      // When closing the panel the focused custom option must be the selected one\n      setFocusedElement(selectedElement);\n\n      // Dispatches the custom event close\n      container.dispatchEvent(new CustomEvent('custom-select:close'));\n    }\n    return isOpen;\n  }\n\n  function clickEvent(e) {\n    // Opener click\n    if (e.target === opener || opener.contains(e.target)) {\n      if (isOpen) {\n        open(false);\n      } else {\n        open();\n      }\n      // Custom Option click\n    } else if (e.target.classList && e.target.classList.contains(builderParams.optionClass) && panel.contains(e.target)) {\n      setSelectedElement(e.target);\n      // Sets the corrisponding select's option to selected updating the select's value too\n      selectedElement.customSelectOriginalOption.selected = true;\n      open(false);\n      // Triggers the native change event of the select\n      select.dispatchEvent(new CustomEvent('change'));\n      // click on label or select (click on label corrispond to select click)\n    } else if (e.target === select) {\n      // if the original select is focusable (for any external reason) let the focus\n      // else trigger the focus on opener\n      if (opener !== document.activeElement && select !== document.activeElement) {\n        opener.focus();\n      }\n      // Click outside the container closes the panel\n    } else if (isOpen && !container.contains(e.target)) {\n      open(false);\n    }\n  }\n\n  function mouseoverEvent(e) {\n    // On mouse move over and options it bacames the focused one\n    if (e.target.classList && e.target.classList.contains(builderParams.optionClass)) {\n      setFocusedElement(e.target);\n    }\n  }\n\n  function keydownEvent(e) {\n    if (!isOpen) {\n      // On \"Arrow down\", \"Arrow up\" and \"Space\" keys opens the panel\n      if (e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 32) {\n        open();\n      }\n    } else {\n      switch (e.keyCode) {\n        case 13:\n        case 32:\n          // On \"Enter\" or \"Space\" selects the focused element as the selected one\n          setSelectedElement(focusedElement);\n          // Sets the corrisponding select's option to selected updating the select's value too\n          selectedElement.customSelectOriginalOption.selected = true;\n          // Triggers the native change event of the select\n          select.dispatchEvent(new CustomEvent('change'));\n          open(false);\n          break;\n        case 27:\n          // On \"Escape\" closes the panel\n          open(false);\n          break;\n\n        case 38:\n          // On \"Arrow up\" set focus to the prev option if present\n          moveFocuesedElement(-1);\n          break;\n        case 40:\n          // On \"Arrow down\" set focus to the next option if present\n          moveFocuesedElement(+1);\n          break;\n        default:\n          // search in panel (autocomplete)\n          if (e.keyCode >= 48 && e.keyCode <= 90) {\n            // clear existing reset timeout\n            if (resetSearchTimeout) {\n              clearTimeout(resetSearchTimeout);\n            }\n\n            // reset timeout for empty search key\n            resetSearchTimeout = setTimeout(function () {\n              searchKey = '';\n            }, 1500);\n\n            // update search keyword appending the current key\n            searchKey += String.fromCharCode(e.keyCode);\n\n            // search the element\n            for (var i = 0, l = select.options.length; i < l; i++) {\n              // removed cause not supported by IE:\n              // if (options[i].text.startsWith(searchKey))\n              if (select.options[i].text.toUpperCase().substr(0, searchKey.length) === searchKey) {\n                setFocusedElement(select.options[i].customSelectCstOption);\n                break;\n              }\n            }\n          }\n          break;\n      }\n    }\n  }\n\n  function changeEvent() {\n    var index = select.selectedIndex;\n    var element = index === -1 ? undefined : select.options[index].customSelectCstOption;\n\n    setSelectedElement(element);\n  }\n\n  // When the option is outside the visible part of the opened panel, updates the scrollTop position\n  // This is the default behaviour\n  // To block it the plugin user must\n  // add a \"custom-select:focus-outside-panel\" eventListener on the panel\n  // with useCapture set to true\n  // and stopPropagation\n  function scrollToFocused(e) {\n    var currPanel = e.currentTarget;\n    var currOption = e.target;\n    // Up\n    if (currOption.offsetTop < currPanel.scrollTop) {\n      currPanel.scrollTop = currOption.offsetTop;\n      // Down\n    } else {\n      currPanel.scrollTop = currOption.offsetTop + currOption.clientHeight - currPanel.clientHeight;\n    }\n  }\n\n  function addEvents() {\n    document.addEventListener('click', clickEvent);\n    panel.addEventListener('mouseover', mouseoverEvent);\n    panel.addEventListener('custom-select:focus-outside-panel', scrollToFocused);\n    select.addEventListener('change', changeEvent);\n    container.addEventListener('keydown', keydownEvent);\n  }\n\n  function removeEvents() {\n    document.removeEventListener('click', clickEvent);\n    panel.removeEventListener('mouseover', mouseoverEvent);\n    panel.removeEventListener('custom-select:focus-outside-panel', scrollToFocused);\n    select.removeEventListener('change', changeEvent);\n    container.removeEventListener('keydown', keydownEvent);\n  }\n\n  function disabled(bool) {\n    if (bool && !select.disabled) {\n      container.classList.add(builderParams.isDisabledClass);\n      select.disabled = true;\n      opener.removeAttribute('tabindex');\n      container.dispatchEvent(new CustomEvent('custom-select:disabled'));\n      removeEvents();\n    } else if (!bool && select.disabled) {\n      container.classList.remove(builderParams.isDisabledClass);\n      select.disabled = false;\n      opener.setAttribute('tabindex', '0');\n      container.dispatchEvent(new CustomEvent('custom-select:enabled'));\n      addEvents();\n    }\n  }\n\n  // Form a given select children DOM tree (options and optgroup),\n  // Creates the corresponding custom HTMLElements list (divs with different classes and attributes)\n  function parseMarkup(children) {\n    var nodeList = children;\n    var cstList = [];\n\n    if (typeof nodeList.length === 'undefined') {\n      throw new TypeError('Invalid Argument');\n    }\n\n    for (var i = 0, li = nodeList.length; i < li; i++) {\n      if (nodeList[i] instanceof HTMLElement && nodeList[i].tagName.toUpperCase() === 'OPTGROUP') {\n        var cstOptgroup = document.createElement('div');\n        cstOptgroup.classList.add(builderParams.optgroupClass);\n        cstOptgroup.setAttribute('data-label', nodeList[i].label);\n\n        // IMPORTANT: Stores in a property of the created custom option group\n        // a hook to the the corrisponding select's option group\n        cstOptgroup.customSelectOriginalOptgroup = nodeList[i];\n\n        // IMPORTANT: Stores in a property of select's option group\n        // a hook to the created custom option group\n        nodeList[i].customSelectCstOptgroup = cstOptgroup;\n\n        var subNodes = parseMarkup(nodeList[i].children);\n        for (var j = 0, lj = subNodes.length; j < lj; j++) {\n          cstOptgroup.appendChild(subNodes[j]);\n        }\n\n        cstList.push(cstOptgroup);\n      } else if (nodeList[i] instanceof HTMLElement && nodeList[i].tagName.toUpperCase() === 'OPTION') {\n        var cstOption = document.createElement('div');\n        cstOption.classList.add(builderParams.optionClass);\n        cstOption.textContent = nodeList[i].text;\n        cstOption.setAttribute('data-value', nodeList[i].value);\n        cstOption.setAttribute('role', 'option');\n\n        // IMPORTANT: Stores in a property of the created custom option\n        // a hook to the the corrisponding select's option\n        cstOption.customSelectOriginalOption = nodeList[i];\n\n        // IMPORTANT: Stores in a property of select's option\n        // a hook to the created custom option\n        nodeList[i].customSelectCstOption = cstOption;\n\n        // If the select's option is selected\n        if (nodeList[i].selected) {\n          setSelectedElement(cstOption);\n        }\n        cstList.push(cstOption);\n      } else {\n        throw new TypeError('Invalid Argument');\n      }\n    }\n    return cstList;\n  }\n\n  function _append(nodePar, appendIntoOriginal, targetPar) {\n    var target = void 0;\n    if (typeof targetPar === 'undefined' || targetPar === select) {\n      target = panel;\n    } else if (targetPar instanceof HTMLElement && targetPar.tagName.toUpperCase() === 'OPTGROUP' && select.contains(targetPar)) {\n      target = targetPar.customSelectCstOptgroup;\n    } else {\n      throw new TypeError('Invalid Argument');\n    }\n\n    // If the node provided is a single HTMLElement it is stored in an array\n    var node = nodePar instanceof HTMLElement ? [nodePar] : nodePar;\n\n    // Injects the options|optgroup in the select\n    if (appendIntoOriginal) {\n      for (var i = 0, l = node.length; i < l; i++) {\n        if (target === panel) {\n          select.appendChild(node[i]);\n        } else {\n          target.customSelectOriginalOptgroup.appendChild(node[i]);\n        }\n      }\n    }\n\n    // The custom markup to append\n    var markupToInsert = parseMarkup(node);\n\n    // Injects the created DOM content in the panel\n    for (var _i = 0, _l = markupToInsert.length; _i < _l; _i++) {\n      target.appendChild(markupToInsert[_i]);\n    }\n\n    return node;\n  }\n\n  function _insertBefore(node, targetPar) {\n    var target = void 0;\n    if (targetPar instanceof HTMLElement && targetPar.tagName.toUpperCase() === 'OPTION' && select.contains(targetPar)) {\n      target = targetPar.customSelectCstOption;\n    } else if (targetPar instanceof HTMLElement && targetPar.tagName.toUpperCase() === 'OPTGROUP' && select.contains(targetPar)) {\n      target = targetPar.customSelectCstOptgroup;\n    } else {\n      throw new TypeError('Invalid Argument');\n    }\n\n    // The custom markup to append\n    var markupToInsert = parseMarkup(node.length ? node : [node]);\n\n    target.parentNode.insertBefore(markupToInsert[0], target);\n\n    // Injects the option or optgroup node in the original select and returns the injected node\n    return targetPar.parentNode.insertBefore(node.length ? node[0] : node, targetPar);\n  }\n\n  function remove(node) {\n    var cstNode = void 0;\n    if (node instanceof HTMLElement && node.tagName.toUpperCase() === 'OPTION' && select.contains(node)) {\n      cstNode = node.customSelectCstOption;\n    } else if (node instanceof HTMLElement && node.tagName.toUpperCase() === 'OPTGROUP' && select.contains(node)) {\n      cstNode = node.customSelectCstOptgroup;\n    } else {\n      throw new TypeError('Invalid Argument');\n    }\n    cstNode.parentNode.removeChild(cstNode);\n    var removedNode = node.parentNode.removeChild(node);\n    changeEvent();\n    return removedNode;\n  }\n\n  function empty() {\n    var removed = [];\n    while (select.children.length) {\n      panel.removeChild(panel.children[0]);\n      removed.push(select.removeChild(select.children[0]));\n    }\n    setSelectedElement();\n    return removed;\n  }\n\n  function destroy() {\n    for (var i = 0, l = select.options.length; i < l; i++) {\n      delete select.options[i].customSelectCstOption;\n    }\n    var optGroup = select.getElementsByTagName('optgroup');\n    for (var _i2 = 0, _l2 = optGroup.length; _i2 < _l2; _i2++) {\n      delete optGroup.customSelectCstOptgroup;\n    }\n\n    removeEvents();\n\n    return container.parentNode.replaceChild(select, container);\n  }\n  //\n  // Custom Select DOM tree creation\n  //\n\n  // Creates the container/wrapper\n  container = document.createElement('div');\n  container.classList.add(builderParams.containerClass, containerClass);\n\n  // Creates the opener\n  opener = document.createElement('span');\n  opener.className = builderParams.openerClass;\n  opener.setAttribute('role', 'combobox');\n  opener.setAttribute('aria-autocomplete', 'list');\n  opener.setAttribute('aria-expanded', 'false');\n  opener.innerHTML = '<span>\\n   ' + (select.selectedIndex !== -1 ? select.options[select.selectedIndex].text : '') + '\\n   </span>';\n\n  // Creates the panel\n  // and injects the markup of the select inside\n  // with some tag and attributes replacement\n  panel = document.createElement('div');\n  // Create random id\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (var i = 0; i < 5; i++) {\n    uId += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  panel.id = containerClass + '-' + uId + '-panel';\n  panel.className = builderParams.panelClass;\n  panel.setAttribute('role', 'listbox');\n  opener.setAttribute('aria-owns', panel.id);\n\n  _append(select.children, false);\n\n  // Injects the container in the original DOM position of the select\n  container.appendChild(opener);\n  select.parentNode.replaceChild(container, select);\n  container.appendChild(select);\n  container.appendChild(panel);\n\n  // ARIA labelledby - label\n  if (document.querySelector('label[for=\"' + select.id + '\"]')) {\n    currLabel = document.querySelector('label[for=\"' + select.id + '\"]');\n  } else if (container.parentNode.tagName.toUpperCase() === 'LABEL') {\n    currLabel = container.parentNode;\n  }\n  if (typeof currLabel !== 'undefined') {\n    currLabel.setAttribute('id', containerClass + '-' + uId + '-label');\n    opener.setAttribute('aria-labelledby', containerClass + '-' + uId + '-label');\n  }\n\n  // Event Init\n  if (select.disabled) {\n    container.classList.add(builderParams.isDisabledClass);\n  } else {\n    opener.setAttribute('tabindex', '0');\n    select.setAttribute('tabindex', '-1');\n    addEvents();\n  }\n\n  // Stores the plugin public exposed methods and properties, directly in the container HTMLElement\n  container.customSelect = {\n    get pluginOptions() {\n      return builderParams;\n    },\n    get open() {\n      return isOpen;\n    },\n    set open(bool) {\n      open(bool);\n    },\n    get disabled() {\n      return select.disabled;\n    },\n    set disabled(bool) {\n      disabled(bool);\n    },\n    get value() {\n      return select.value;\n    },\n    set value(val) {\n      setValue(val);\n    },\n    append: function append(node, target) {\n      return _append(node, true, target);\n    },\n    insertBefore: function insertBefore(node, target) {\n      return _insertBefore(node, target);\n    },\n    remove: remove,\n    empty: empty,\n    destroy: destroy,\n    opener: opener,\n    select: select,\n    panel: panel,\n    container: container\n  };\n\n  // Stores the plugin directly in the original select\n  select.customSelect = container.customSelect;\n\n  // Returns the plugin instance, with the public exposed methods and properties\n  return container.customSelect;\n}\n\nfunction customSelect(element, customParams) {\n  // Overrides the default options with the ones provided by the user\n  var nodeList = [];\n  var selects = [];\n\n  return function init() {\n    // The plugin is called on a single HTMLElement\n    if (element && element instanceof HTMLElement && element.tagName.toUpperCase() === 'SELECT') {\n      nodeList.push(element);\n      // The plugin is called on a selector\n    } else if (element && typeof element === 'string') {\n      var elementsList = document.querySelectorAll(element);\n      for (var i = 0, l = elementsList.length; i < l; ++i) {\n        if (elementsList[i] instanceof HTMLElement && elementsList[i].tagName.toUpperCase() === 'SELECT') {\n          nodeList.push(elementsList[i]);\n        }\n      }\n      // The plugin is called on any HTMLElements list (NodeList, HTMLCollection, Array, etc.)\n    } else if (element && element.length) {\n      for (var _i3 = 0, _l3 = element.length; _i3 < _l3; ++_i3) {\n        if (element[_i3] instanceof HTMLElement && element[_i3].tagName.toUpperCase() === 'SELECT') {\n          nodeList.push(element[_i3]);\n        }\n      }\n    }\n\n    // Launches the plugin over every HTMLElement\n    // And stores every plugin instance\n    for (var _i4 = 0, _l4 = nodeList.length; _i4 < _l4; ++_i4) {\n      selects.push(builder(nodeList[_i4], _extends({}, defaultParams, customParams)));\n    }\n\n    // Returns all plugin instances\n    return selects;\n  }();\n}\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://gulp-starter/./node_modules/custom-select/build/index.js?");

/***/ }),

/***/ "./src/js/main.js":
/*!************************!*\
  !*** ./src/js/main.js ***!
  \************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("\r\n// Кастомизация <select> с помощью библиотеки CustomSelect\r\nconst customSelect = (__webpack_require__(/*! custom-select */ \"./node_modules/custom-select/build/index.js\")[\"default\"]);\r\nArray.from(document.querySelectorAll('select')).forEach(select => {\r\n  if(select) {\r\n    customSelect(select);\r\n  }\r\n})\r\n\r\nArray.from(document.querySelectorAll('.custom-select-container')).forEach(select => {\r\n  if (select) {\r\n    openCustomSelect(select);\r\n  }\r\n})\r\n\r\nfunction openCustomSelect(select) {\r\n  const opener = select.querySelector('.custom-select-opener');\r\n  const panel = select.querySelector('.custom-select-panel');\r\n  const options = select.querySelectorAll('.custom-select-option')\r\n\r\n  Array.from(options).forEach(option => {\r\n    if (option) {\r\n      option.onclick = () => {\r\n        panel.classList.toggle('is-open')\r\n      }\r\n    }\r\n  })\r\n  opener.onclick = () => {\r\n    panel.classList.toggle('is-open');\r\n  }\r\n}\r\n\r\n\r\n// Бегущая строка\r\nArray.from(document.getElementsByClassName('ticker')).forEach(ticker => {\r\n  startTicker(ticker, 5)\r\n  window.onresize = () => {\r\n    startTicker(ticker, 5, true);\r\n  }\r\n})\r\n\r\nfunction startTicker(ticker, speed, isOnResize) {\r\n  const tickerLabelBlock = ticker.querySelector('.ticker__labels')\r\n  const tickerLabel = ticker.querySelector('.ticker__label');\r\n  tickerLabelW = tickerLabel.clientWidth + Number(window.getComputedStyle(tickerLabel).getPropertyValue('margin-right').slice(0, -2));\r\n\r\n  const labelsMaxNum = window.innerWidth / tickerLabelW + 1;\r\n  const labelsCurNum = tickerLabelBlock.children.length;\r\n  if (labelsCurNum < labelsMaxNum) {\r\n    for (let i = 0; i <= labelsMaxNum - labelsCurNum; i++) {\r\n      const newLabel = tickerLabel.cloneNode(true);\r\n      tickerLabelBlock.appendChild(newLabel);\r\n    }\r\n  }\r\n\r\n  if (!isOnResize) {\r\n    let i = 0;\r\n    setInterval(() => {\r\n      if (i >= tickerLabelW) {\r\n        i = 0;\r\n      }\r\n      tickerLabelBlock.style.left = `-${i}px`;\r\n      i++;\r\n    }, 50/speed)\r\n  }\r\n}\r\n\r\n\r\n// Смена вкладки в блоке \"Наши филиалы\"\r\nconst filialBlockAddresses = document.querySelector('.filial-block__addresses');\r\nfilialBlockAddresses.querySelectorAll('.tab').forEach(tab => {\r\n  tab.onclick = () => {\r\n    changeTab(tab, filialBlockAddresses);\r\n  }\r\n});\r\n\r\nfunction changeTab(tab, parentBlock) {\r\n  if (tab.classList.contains('tab_active')) {\r\n    return;\r\n  }\r\n\r\n  const blockId = tab.getAttribute('openBlock');\r\n  const newBlock = document.getElementById(blockId);\r\n  const prevBlock = parentBlock.querySelector('.active');\r\n  const prevTab = parentBlock.querySelector('.tab_active');\r\n\r\n  console.log(prevBlock, prevTab);\r\n  newBlock.classList.add('active');\r\n  prevBlock.classList.remove('active');\r\n\r\n  tab.classList.add('tab_active')\r\n  prevTab.classList.remove('tab_active');\r\n}\r\n\r\n\r\n// Центрирование картинок в блоке\r\nwindow.onload = () => {\r\n  Array.from(document.querySelectorAll('img._center')).forEach(img => {\r\n    centerImg(img);\r\n  })\r\n}\r\n\r\nfunction centerImg(img) {\r\n  let w = img.clientWidth;\r\n  let h = img.clientHeight;\r\n  const parent = img.parentElement.parentElement;\r\n  const parentW = parent.clientWidth\r\n  const parentH = parent.clientHeight\r\n\r\n\r\n  if (w/h > parentW/parentH) {\r\n    img.style.width = \"auto\";\r\n    img.style.height = \"100%\"\r\n  } else {\r\n    img.style.width = \"100%\";\r\n    img.style.height = \"auto\"\r\n  }\r\n}\r\n\r\n\r\n// Активация слайдеров\r\nArray.from(document.querySelectorAll('.slider')).forEach(slider => {\r\n  const middleware = [];\r\n  if (slider.classList.contains('instructors-block__slider')) {\r\n    middleware.push(setActiveContent, centerItemImg)\r\n\r\n    function centerItemImg() {\r\n      const img = slider.querySelector('.instructors-block__slider img');\r\n      centerImg(img);\r\n    }\r\n  \r\n    function setActiveContent(btn) {\r\n      const data = __webpack_require__(/*! ../../gulpfile.js/data/instructors.json */ \"./gulpfile.js/data/instructors.json\");\r\n      const container = slider.querySelector('.instructors-block__item-info')\r\n      const title = container.querySelector('.instructors-block__item-title')\r\n      const subtitleDriving = container.querySelector('.instructors-block__item-exp-driving')\r\n      const subtitleInstructor = container.querySelector('.instructors-block__item-exp-instructor')\r\n      const itemNum = btn.getAttribute('activeItemNum');\r\n\r\n  \r\n      title.innerHTML = data[itemNum].name;\r\n      subtitleDriving.querySelector('span').innerHTML = data[itemNum].info.exp_driving\r\n      subtitleInstructor.querySelector('span').innerHTML = data[itemNum].info.exp_instructor;\r\n\r\n      const curItemNumBlock = slider.querySelector('.instructors-block__slider-item-num .cur');\r\n      curItemNumBlock.innerHTML = Number(itemNum)+1;\r\n    }\r\n  }\r\n\r\n  if (slider.classList.contains('faq-block__slider')) {\r\n    middleware.push(closeItems);\r\n    \r\n    function closeItems() {\r\n      const openedItems = slider.querySelectorAll('.open')\r\n      Array.from(openedItems).forEach(item => {\r\n        item.classList.remove('open');\r\n      })\r\n    }\r\n  }\r\n\r\n  moveSliderListener(slider, middleware);\r\n})\r\n\r\nfunction moveSliderListener(slider, middleware) {\r\n  const prevBtn = slider.querySelector('.slider__btn-prev')\r\n  const nextBtn = slider.querySelector('.slider__btn-next')\r\n  if (!slider.querySelector('.slider__item.active')) {\r\n    slider.querySelector('.slider__item').classList.add('active');\r\n  }\r\n\r\n  prevBtn.onclick = () => {\r\n    btnListener([prevBtn, nextBtn], false)\r\n  }\r\n  nextBtn.onclick = () => {\r\n    btnListener([prevBtn, nextBtn], true)\r\n  }\r\n  \r\n\r\n  function btnListener(btns, isForward) {\r\n    const items = slider.getElementsByClassName('slider__item')\r\n    let activeItemNum;\r\n    const activeItem = Array.from(items).find((item, i) => {\r\n      if (item.classList.contains(\"active\")) {\r\n        activeItemNum = i;\r\n        return item;\r\n      }\r\n    })\r\n    let newItem;\r\n\r\n    if (isForward) {\r\n      if (activeItemNum < items.length-1) {\r\n        newItem = items[++activeItemNum];\r\n      } else {\r\n        newItem = items[activeItemNum = 0]\r\n      }\r\n    } else {\r\n      if (activeItemNum > 0) {\r\n        newItem = items[--activeItemNum];\r\n      } else {\r\n        newItem = items[activeItemNum = items.length-1];\r\n      }\r\n    }\r\n\r\n    btns.forEach(btn => {\r\n      btn.setAttribute('activeItemNum', activeItemNum)\r\n    })\r\n    \r\n    activeItem.classList.remove('active');\r\n    newItem.classList.add('active');\r\n\r\n    const activeContainer = slider.querySelector('.slider__item-active-container');\r\n    if (activeContainer) {\r\n      activeContainer.children[0].remove();\r\n      activeContainer.appendChild(newItem.children[0].cloneNode(true));\r\n    }\r\n\r\n    if (middleware.length) {\r\n      middleware.forEach(func => {\r\n        func(btns[0]);\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\n\r\n// Раскрытие блока\r\nArray.from(document.querySelectorAll('.unfold')).forEach(item => {\r\n  unfoldItem(item);\r\n})\r\n\r\nfunction unfoldItem(item) {\r\n  const btn = item.querySelector('.unfold__btn')\r\n\r\n  btn.onclick = () => {\r\n    item.classList.toggle('open');\r\n  }\r\n}\r\n\r\n\r\n// Активация Popup\r\nArray.from(document.querySelectorAll('.popup-trigger')).forEach(trigger => {\r\n  if (trigger) {\r\n    trigger.onclick = () => {\r\n      openPopup(trigger);\r\n    }\r\n  }\r\n})\r\n\r\nfunction openPopup(trigger) {\r\n  const popup = document.querySelector('#' + trigger.getAttribute(\"open\"));\r\n  const popupBg = popup.querySelector('.popup__bg')\r\n  const popupCloseBtn = popup.querySelector('.popup__close-btn')\r\n\r\n  popup.style.display = 'block';\r\n  \r\n  if (popupBg) {\r\n    popupBg.onclick = () => {\r\n      closePopup(popup)\r\n    }\r\n  }\r\n  if (popupCloseBtn) {\r\n    popupCloseBtn.onclick = () => {\r\n      closePopup(popup)\r\n    }\r\n  }\r\n\r\n  function closePopup(popup) {\r\n    popup.style.display = 'none';\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\n// Отправка форм\r\nArray.from(document.querySelectorAll('form')).forEach(form => {\r\n  if (form) {\r\n    submitForm(form)\r\n  }\r\n})\r\n\r\nfunction submitForm (form) {\r\n  const submitBtn = form.querySelector('.submit-btn .btn');\r\n  const successBlock = form.parentElement.querySelector('.success')\r\n\r\n  submitBtn.onclick = () => {\r\n    form.style.display = 'none';\r\n    successBlock.style.display = 'block';\r\n  }\r\n}\n\n//# sourceURL=webpack://gulp-starter/./src/js/main.js?");

/***/ }),

/***/ "./gulpfile.js/data/instructors.json":
/*!*******************************************!*\
  !*** ./gulpfile.js/data/instructors.json ***!
  \*******************************************/
/***/ (function(module) {

"use strict";
eval("module.exports = JSON.parse('[{\"name\":\"Любимов Игорь Юрьевич\",\"info\":{\"exp_driving\":\"с 1996 г.\",\"exp_instructor\":\"с 2002 г.\"},\"pic\":\"instructor-1.jpg\"},{\"name\":\"Любимов Игорь Юрьевич_2\",\"info\":{\"exp_driving\":\"с 1996 г._2\",\"exp_instructor\":\"с 2002 г._2\"},\"pic\":\"instructor-2.jpg\"},{\"name\":\"Любимов Игорь Юрьевич_3\",\"info\":{\"exp_driving\":\"с 1996 г._3\",\"exp_instructor\":\"с 2002 г._3\"},\"pic\":\"instructor-3.jpg\"},{\"name\":\"Любимов Игорь Юрьевич_4\",\"info\":{\"exp_driving\":\"с 1996 г._4\",\"exp_instructor\":\"с 2002 г._4\"},\"pic\":\"instructor-4.jpg\"}]');\n\n//# sourceURL=webpack://gulp-starter/./gulpfile.js/data/instructors.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/main.js");
/******/ 	
/******/ })()
;